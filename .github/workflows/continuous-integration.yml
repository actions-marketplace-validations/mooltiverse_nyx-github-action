# The Nyx GitHub Action CI pipeline running on GitHub Actions

name: Nyx GitHub Action
on: [push]
# Avoid running multiple pipelines concurrently to avoid overlapping releases and tags
concurrency:
  group: project
  cancel-in-progress: false

jobs:
  test-action:
    name: Test Action
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.nyx.outputs.branch }}
      bump: ${{ steps.nyx.outputs.bump }}
      coreVersion: ${{ steps.nyx.outputs.coreVersion }}
      latestVersion: ${{ steps.nyx.outputs.latestVersion }}
      newRelease: ${{ steps.nyx.outputs.newRelease }}
      newVersion: ${{ steps.nyx.outputs.newVersion }}
      scheme: ${{ steps.nyx.outputs.scheme }}
      timestamp: ${{ steps.nyx.outputs.timestamp }}
      previousVersion: ${{ steps.nyx.outputs.previousVersion }}
      primeVersion: ${{ steps.nyx.outputs.primeVersion }}
      version: ${{ steps.nyx.outputs.version }}
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Test the Nyx GitHub Action with Infer
      id: nyx
      # Run the action directly from the checked out repository to make sure we're testing the one that has been pushed
      uses: ./
      with:
        command: 'infer'
        # TODO: test other arguments here
    # TODO: test the outputs from the command
    #- name: Get the output from the Nyx GitHub Action
    #  run: echo "The version was ${{ steps.nyx.outputs.version }}"

  test-output:
    name: Test outputs
    runs-on: ubuntu-latest
    needs: test-action
    steps:
    - name: Print branch
      run: echo ${{needs.test-action.outputs.branch}}
    - name: Print bump
      run: echo ${{needs.test-action.outputs.bump}}
    - name: Print coreVersion
      run: echo ${{needs.test-action.outputs.coreVersion}}
    - name: Print latestVersion
      run: echo ${{needs.test-action.outputs.latestVersion}}
    - name: Print newRelease
      run: echo ${{needs.test-action.outputs.newRelease}}
    - name: Print newVersion
      run: echo ${{needs.test-action.outputs.newVersion}}
    - name: Print scheme
      run: echo ${{needs.test-action.outputs.scheme}}
    - name: Print timestamp
      run: echo ${{needs.test-action.outputs.timestamp}}
    - name: Print previousVersion
      run: echo ${{needs.test-action.outputs.previousVersion}}
    - name: Print primeVersion
      run: echo ${{needs.test-action.outputs.primeVersion}}
    - name: Print version
      run: echo ${{needs.test-action.outputs.version}}
